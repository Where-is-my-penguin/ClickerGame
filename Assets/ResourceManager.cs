using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using TMPro;

public class ResourceManager : MonoBehaviour
{
    public PopupManager popupManager;
    public TaskManager taskManager;

    // Тексты для отображения количества ресурсов
    public TextMeshProUGUI ТекстКоличестваВетки;
    public TextMeshProUGUI ТекстКоличестваКамней;
    public TextMeshProUGUI ТекстКоличестваСоломы;
    public TextMeshProUGUI ТекстКоличестваБрёвен;
    public TextMeshProUGUI ТекстКоличестваТопоров;
    public TextMeshProUGUI ТекстКоличестваЛопат;


    // Тексты для деревенского Canvas
    public TextMeshProUGUI ТекстДеревниВетки;
    public TextMeshProUGUI ТекстДеревниКамней;
    public TextMeshProUGUI ТекстДеревниСоломы;
    public TextMeshProUGUI ТекстДеревниБрёвен;
    public TextMeshProUGUI ТекстЖители;
    public TextMeshProUGUI ТекстРабочиеМеста;
    public TextMeshProUGUI ТекстРабочиеМестаЛесопилки;
    public TextMeshProUGUI ТекстРабочиеМестаЗемлекопа;
    public TextMeshProUGUI ТекстОставшиесяКлики;       // Текст для отображения оставшихся кликов
    public TextMeshProUGUI ТекстДобычиВетокЛесоруба;                 // ------------------//
    public TextMeshProUGUI ТекстДобычиБрёвенЛесоруба;                // Текст показывает  //
    public TextMeshProUGUI ТекстДобычиКамнейЗемлекопа;               // добычу руды/минуту//
    public TextMeshProUGUI ТекстДобычиСоломыЗемлекопа;               // ------------------//


    // Переменные для ресурсов
    public int ветки = 0;
    public int камни = 0;
    public int солома = 0;
    public int брёвна = 0;
    public int топоры = 0;
    public int лопаты = 0;

    // Пассивная добыча ресурсов
    private int добычаВетокЛесопилки = 30;
    private int добычаБрёвенЛесопилки = 10;
    private int добычаКамнейЗемлекопа = 30;
    private int добычаСоломыЗемлекопа = 30;

    // Переменные для деревни
    public int свободныеМеста = 0;         // Свободные места для жителей
    public int жители = 0;                // Текущее количество жителей
    public int свободныеРабочиеМеста = 0; // Рабочие места доступные для жителй
    public int жителиНаРаботе = 0;        // Сколько жителей работают


    // Рабочие места
    public int рабочиеМестаЛесопилки = 0; // Рабочие места в лесопилке
    public int занятыеМестаЛесопилки = 0;

    public int рабочиеМестаЗемлекопа = 0; // Рабочие места в хижине землекопа
    public int занятыеМестаЗемлекопа = 0;


    // Пригласить жителя
    private int текущиеКлики = 0;     // Сколько кликов сделано
    private int кликиДляЖителя = 100; // Сколько кликов нужно для жителя

    private void Start()
    {
        ОбновитьКлики();   // Обновляем текст оставшихся кликов при запуске
        ОбновитьРесурсы(); // Обновляем ресурсы и рабочие места


        // Пассивная добыча зданий
        InvokeRepeating(nameof(ДобычаЛесопилки), 60f, 60f); //Каждые 10 секунд
        InvokeRepeating(nameof(ДобычаЗемлекопа), 60f, 60f);
    }

    // Обновление ресурсов
    public void ОбновитьРесурсы()
    {
        // Лесной Canvas
        ТекстКоличестваВетки.text = $"{ветки}";
        ТекстКоличестваКамней.text = $"{камни}";
        ТекстКоличестваСоломы.text = $"{солома}";
        ТекстКоличестваБрёвен.text = $"{брёвна}";
        ТекстКоличестваТопоров.text = $"{топоры}";
        ТекстКоличестваЛопат.text = $"{лопаты}";

        // Деревенский Canvas
        ТекстДеревниВетки.text = $"{ветки}";
        ТекстДеревниКамней.text = $"{камни}";
        ТекстДеревниСоломы.text = $"{солома}";
        ТекстДеревниБрёвен.text = $"{брёвна}";

        // Жители и рабочие места
        ТекстЖители.text = $"{жители}/{свободныеМеста}";
        ТекстРабочиеМеста.text = $"{жителиНаРаботе}/{свободныеРабочиеМеста}";

        // Рабочие места
        ТекстРабочиеМестаЛесопилки.text = $"{занятыеМестаЛесопилки}/{рабочиеМестаЛесопилки}";
        ТекстРабочиеМестаЗемлекопа.text = $"{занятыеМестаЗемлекопа}/{рабочиеМестаЗемлекопа}";
        ОбновитьДобычуРесурсов();
    }

    // Добавление веток
    public void ДобавитьВетку()
    {
        ветки++;
        ОбновитьРесурсы();
    }

    // Добавление камней
    public void ДобавитьКамень()
    {
        камни++;
        ОбновитьРесурсы();
    }

    // Добавление соломы
    public void ДобавитьСолому()
    {
        солома++;
        ОбновитьРесурсы();
    }

    // Создание топора
    public void СоздатьТопор()
    {
        // Условие: для создания топора
        if (ветки >= 15 && солома >= 15 && камни >= 10)
        {
            ветки -= 15;
            солома -= 15;
            камни -= 10;
            топоры++;

            //Обновляем текст
            ОбновитьРесурсы();
            FindObjectOfType<TaskManager>().ПроверитьЦель(); 
        }
        else
        {
            popupManager.ShowPopup("Не хватает ресурсов для создания топора!");
        }
    }

    // Добыча бревен
    public void ДобавитьБревно()
    {
        // Условие: нужен хотя бы один топор
        if (топоры > 0)
        {
            топоры--;
            int ДобавленоБрёвен = 5;

            //Добыча пенька
            if (лопаты > 0)
            {
                лопаты--;
                ДобавленоБрёвен += 2;
            }

            брёвна += ДобавленоБрёвен;

            // Обновляем текст
            ОбновитьРесурсы();
            Debug.Log($"Вы добыли {ДобавленоБрёвен} брёвен!");
            FindObjectOfType<TaskManager>().ПроверитьЦель();
        }
        else
        {
            popupManager.ShowPopup("Требуется топор для добычи брёвен!");
        }
    }

    // Создание Лопаты
    public void СоздатьЛопату()
    {
        // Условие: для создания топора
        if (камни >= 10 && брёвна >= 1 && солома >= 5)
        {
            камни -= 10;
            брёвна -= 1;
            солома -= 5;
            лопаты++;

            //Обновляем текст
            ОбновитьРесурсы();
            FindObjectOfType<TaskManager>().ПроверитьЦель();
        }
        else
        {
            popupManager.ShowPopup("Не хватает ресурсов для создания лопаты!");
        }
    }

    // Назначение жителей на рабочее место
    public void НазначитьЖителяНаРаботу()
    {
        if (жителиНаРаботе < свободныеРабочиеМеста && жители > жителиНаРаботе)
        {
            if (занятыеМестаЛесопилки < рабочиеМестаЛесопилки)
            {
                занятыеМестаЛесопилки++;
            }
            else if (занятыеМестаЗемлекопа < рабочиеМестаЗемлекопа)
            {
                занятыеМестаЗемлекопа++;
            }

            жителиНаРаботе++;
            ОбновитьРесурсы();
        }
        else
        {
            popupManager.ShowPopup("Нет свободных рабочих мест или свободных жителей!");
        }
    }

    // Создание Лесопилки
    public void ПостроитьЛесопилку()
    {
        if (брёвна >= 60 && камни >= 50 && солома >= 20)
        {
            брёвна -= 60;
            камни -= 50;
            солома -= 20;

            рабочиеМестаЛесопилки++;
            свободныеРабочиеМеста++;

            // Автоматическое распределение свободных жителей
            if (жители > жителиНаРаботе)
            {
                РаспределитьЖителя();
            }

            ОбновитьРесурсы();
            Debug.Log("Лесопилка Построена!");
            FindObjectOfType<TaskManager>().ПроверитьЦель();
        }
        else
        {
            popupManager.ShowPopup("Не хватает ресурсов для постройки лесопилки!");
        }
    }

    // Создание хижины Землекопа
    public void ПостроитьХижинуЗемлекопа()
    {
        if (брёвна >= 35 && камни >= 30 && солома >= 20)
        {
            брёвна -= 35;
            камни -= 30;
            солома -= 20;

            рабочиеМестаЗемлекопа++;
            свободныеРабочиеМеста++;

            // Автоматическое распределение свободных жителей
            if (жители > жителиНаРаботе)
            {
                РаспределитьЖителя();
            }

            ОбновитьРесурсы();
            Debug.Log("Хижина землекопа построена!");
            FindObjectOfType<TaskManager>().ПроверитьЦель();
        }
        else
        {
            popupManager.ShowPopup("Не хватает ресурсов для постройки хижины землекопа!");
        }
    }

    // Создание дома
    public void ПостроитьДом()
    {
        if (брёвна >= 100 && камни >= 50 && солома >= 30)
        {
            брёвна -= 100;
            камни -= 40;
            солома -= 30;

            свободныеМеста += 2; //Каждый дом добавляет 2 места для жителей

            ОбновитьРесурсы();
            Debug.Log("Дом Построен!");
            FindObjectOfType<TaskManager>().ПроверитьЦель();
        }
        else
        {
            popupManager.ShowPopup("Не хватает ресурсов для постройки дома!");
        }
    }

    // Кнопка для приглашение жителя
    public void КликнутьДляЖителя()
    {
        // Проверям есть ли свободные места для жителей
        if (жители >= свободныеМеста)
        {
            popupManager.ShowPopup("Нет свободных мест для нового жителя! Постройте дом.");
            return;
        }

        текущиеКлики += 1;
        ОбновитьКлики();

        // Проверям достигнут ли нужный порог
        if (текущиеКлики >= кликиДляЖителя)
        {
            текущиеКлики = 0; // Сбрасываем клики
            ПригласитьЖителя();
        }
        ОбновитьРесурсы();
    }

    // Добавить жителя
    public void ПригласитьЖителя()
    {
        if (жители < свободныеМеста)
        {
            жители++;

            if (!РаспределитьЖителя())
            {
                popupManager.ShowPopup("Житель добавлен, но нет доступных рабочих мест!");
            }
            else
            {
                popupManager.ShowPopup("Житель добавлен и назначен на работу!");
            }

            текущиеКлики = 0;

            ОбновитьКлики();
            ОбновитьРесурсы();

        }
        else
        {
            popupManager.ShowPopup("Нет свободных мест для нового жителя! Постройте дом.");
        }
    }

    // Обновить оставшихся кликов для приглашения жителя
    private void ОбновитьКлики()
    {
        int оставшиесяКлики = кликиДляЖителя - текущиеКлики;
        ТекстОставшиесяКлики.text = $"{оставшиесяКлики}";
    }

    // Пассивная добыча лесопилки
    private void ДобычаЛесопилки()
    {
        if (занятыеМестаЛесопилки > 0)
        {
            ветки += занятыеМестаЛесопилки * добычаВетокЛесопилки;   // Каждое место даёт 3 ветки
            брёвна += занятыеМестаЛесопилки * добычаБрёвенЛесопилки; // Каждое место даёт 1 бревно
            ОбновитьРесурсы();
            ОбновитьДобычуРесурсов();
            Debug.Log($"Лесопилка добыла {занятыеМестаЛесопилки * 3} веток и {занятыеМестаЛесопилки} брёвен.");
        }
    }

    // Пассивная добыча хижины землекопа
    private void ДобычаЗемлекопа()
    {
        if (занятыеМестаЗемлекопа > 0)
        {
            камни += занятыеМестаЗемлекопа * добычаКамнейЗемлекопа;  // Каждое место даёт 3 камня
            солома += занятыеМестаЗемлекопа * добычаСоломыЗемлекопа; // Каждое место даёт 3 соломы
            ОбновитьРесурсы();
            ОбновитьДобычуРесурсов();
            Debug.Log($"Хижина землекопа добыла {занятыеМестаЗемлекопа * 3} камней и {занятыеМестаЗемлекопа * 3} соломы.");
        }
    }

    // Автоматически распределяем жителей на рабочие места
    private bool РаспределитьЖителя()
    {
        // Проверяем рабочие места в лесопилке
        if (занятыеМестаЛесопилки < рабочиеМестаЛесопилки)
        {
            занятыеМестаЛесопилки++;
            жителиНаРаботе++;
            ОбновитьДобычуРесурсов();
            return true;            // Житель успешно распределён
        }

        // Проверяем рабочие места в хижине землекопа
        if (занятыеМестаЗемлекопа < рабочиеМестаЗемлекопа)
        {
            занятыеМестаЗемлекопа++;
            жителиНаРаботе++;
            ОбновитьДобычуРесурсов();
            return true;            // Житель успешно распределён
        }

        return false;              // Нет доступных рабочих мест 
    }

    // Добыча ресурсов/минуту
    private void ОбновитьДобычуРесурсов()
    {
        //Добыча в минуту лесопилки
        int веткиВМин = занятыеМестаЛесопилки * добычаВетокЛесопилки;
        int брёвнаВМин = занятыеМестаЛесопилки * добычаБрёвенЛесопилки;

        //Добыча в минуту землекопа
        int камниВМин = занятыеМестаЗемлекопа * добычаКамнейЗемлекопа;
        int соломаВМин = занятыеМестаЗемлекопа * добычаСоломыЗемлекопа;

        ТекстДобычиВетокЛесоруба.text = $"{веткиВМин}/мин";
        ТекстДобычиБрёвенЛесоруба.text = $"{брёвнаВМин}/мин";

        ТекстДобычиКамнейЗемлекопа.text = $"{камниВМин}/мин";
        ТекстДобычиСоломыЗемлекопа.text = $"{соломаВМин}/мин";
    }
}
